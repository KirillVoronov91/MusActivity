import logging
import random
import sys
import os

import telebot
from telebot import types
import time
from time import sleep
import threading
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
import sqlite3
# –ü—Ä–∏ –ø–æ–º–æ—â–∏ –±–∏–ª–∏–æ—Ç–µ–∫–∏ os —Å–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ª—é–±–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
project_root_dir = os.path.dirname(os.path.abspath(__file__))
conn = sqlite3.connect(os.path.join(project_root_dir, 'db', 'users_base'), check_same_thread=False)
cursor = conn.cursor()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from utils.database_classes import UserInfo

user_info = UserInfo(conn, cursor)

from utils.database_classes import team_mode_UserPointsChat

team_mode_user_pointsChat = team_mode_UserPointsChat(conn, cursor)

from utils.database_classes import self_mode_UserPointsChat

self_mode_user_pointsChat = self_mode_UserPointsChat(conn, cursor)

from utils.database_classes import Songs

random_song = Songs(cursor)

from utils.database_classes import update_tasks_and_songs

update_tasks_and_songs = update_tasks_and_songs(cursor)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—â–∞—è –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def timeconv(x):
    return time.strftime("%d.%m.%Y %H:%M:%S", time.localtime(x))


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
token = '–¢–û–ö–ï–ù, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞ –≤ BothFather'
bot = telebot.TeleBot(token)

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
self_mode_tasks = {
    'task1': 'üåç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫',
    'task2': 'üó£Ô∏è –û–±—ä—è—Å–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏',
    'task3': 'üÜö –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–Ω—Ç–æ–Ω–∏–º–∞–º–∏',
    'task4': 'üéº –ü—Ä–æ–ø–µ—Ç—å –º–æ—Ç–∏–≤',
    'task5': 'üé® –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å',
    'task6': 'üòÄ –ò–∑–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —ç–º–æ–¥–∑–∏',
    'task7': '‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–∞/–Ω–µ—Ç',
    'task8': 'üêä –ü–æ–∫–∞–∑–∞—Ç—å',
    'task9': '‚ö†Ô∏è –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–∞–º–∏ –Ω–∞ ¬´–°¬ª –∏ ¬´–ü¬ª:',
}

team_mode_tasks = {
    'task1': 'üåç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∏–Ω. —è–∑—ã–∫ (2 –±–∞–ª–ª–∞)',
    'task2': 'üó£Ô∏è –û–±—ä—è—Å–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (1 –±–∞–ª–ª)',
    'task3': 'üÜö –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–Ω—Ç–æ–Ω–∏–º–∞–º–∏ (1 –±–∞–ª–ª)',
    'task4': 'üéº –ü—Ä–æ–ø–µ—Ç—å –º–æ—Ç–∏–≤ (1,5 –±–∞–ª–ª–∞)',
    'task5': 'üé® –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å (2 –±–∞–ª–ª–∞)',
    'task6': 'üòÄ –ò–∑–æ–±—Ä–∞–∑–∏—Ç—å —ç–º–æ–¥–∑–∏ (2 –±–∞–ª–ª–∞)',
    'task7': '‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–∞/–Ω–µ—Ç (1 –±–∞–ª–ª)',
    'task8': 'üêä –ü–æ–∫–∞–∑–∞—Ç—å (1,5 –±–∞–ª–ª–∞)',
    'task9': '‚ö†Ô∏è –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–∞–º–∏ –Ω–∞ –° –∏ –ü: (1.5 –±.)',
}
tasks_scores = {'‚ö†Ô∏è –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–∞–º–∏ –Ω–∞ –° –∏ –ü: (1.5 –±.)':1.5, '‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–∞/–Ω–µ—Ç (1 –±–∞–ª–ª)': 1, 'üòÄ –ò–∑–æ–±—Ä–∞–∑–∏—Ç—å —ç–º–æ–¥–∑–∏ (2 –±–∞–ª–ª–∞)':2, 'üåç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∏–Ω. —è–∑—ã–∫ (2 –±–∞–ª–ª–∞)': 2, 'üó£Ô∏è –û–±—ä—è—Å–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (1 –±–∞–ª–ª)': 1,
                'üÜö –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–Ω—Ç–æ–Ω–∏–º–∞–º–∏ (1 –±–∞–ª–ª)': 1, 'üéº –ü—Ä–æ–ø–µ—Ç—å –º–æ—Ç–∏–≤ (1,5 –±–∞–ª–ª–∞)': 1.5,
                'üé® –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å (2 –±–∞–ª–ª–∞)': 2, 'üêä –ü–æ–∫–∞–∑–∞—Ç—å (1,5 –±–∞–ª–ª–∞)': 1.5}

# –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤
lock = threading.Lock()
# –°–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
team_mode_user_timers = {}
self_mode_user_timers = {}

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è markup_choose_mode –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "go"
from utils.buttons import Choose_mode_menu_keyboard

choose_mode_keyboard = Choose_mode_menu_keyboard()
markup_choose_mode = choose_mode_keyboard.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è markup_rules –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ø—Ä–∞–≤–∏–ª–∞"
from utils.buttons import RulesKeyboard

rules_keyboard = RulesKeyboard()
markup_rules = rules_keyboard.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è markup_stat –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
from utils.buttons import StatKeyboard

stat_keyboard = StatKeyboard()
markup_stat = stat_keyboard.keyboard

from utils.buttons import AfterStatKeyboardModes

after_stat_keyboard_modes = AfterStatKeyboardModes()
markup_after_stat_modes = after_stat_keyboard_modes.keyboard

from utils.buttons import StatKeyboardModes

stat_keyboard_modes = StatKeyboardModes()
markup_stat_modes = stat_keyboard_modes.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∫–Ω–æ–ø–∫–∏, –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
from utils.buttons import Get_song_keyboard_self_mode

self_mode_get_task_keyboard = Get_song_keyboard_self_mode()
markup_get_song_self_mode = self_mode_get_task_keyboard.keyboard

from utils.buttons import Get_song_keyboard_team_mode

get_task_keyboard1 = Get_song_keyboard_team_mode()
markup_get_song_team_mode = get_task_keyboard1.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∫–Ω–æ–ø–∫–∏, –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä"
from utils.buttons import genres_team

genres_team_keyboard = genres_team()
markup_genres_team = genres_team_keyboard.keyboard

from utils.buttons import genres_self

genres_self_keyboard = genres_self()
markup_genres_self = genres_self_keyboard.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∫–Ω–æ–ø–∫–∏, –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥"
from utils.buttons import times_team

times_team_keyboard = times_team()
markup_times_team = times_team_keyboard.keyboard

from utils.buttons import times_self

times_self_keyboard = times_self()
markup_times_self = times_self_keyboard.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∫–Ω–æ–ø–∫–∏, –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–Ω–∏ - –≤—ã–±–æ—Ä –¥—Ä—É–≥–æ–π –ø–µ—Å–Ω–∏ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
from utils.buttons import Chosen_song_keyboard_team_mode

chosen_song_keyboard_team_mode = Chosen_song_keyboard_team_mode()
markup_chosen_song_team_mode = chosen_song_keyboard_team_mode.keyboard

from utils.buttons import Chosen_song_keyboard_self_mode

chosen_song_keyboard_self_mode = Chosen_song_keyboard_self_mode()
markup_chosen_song_self_mode = chosen_song_keyboard_self_mode.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –∫–Ω–æ–ø–∫–∏, –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏ –∏ –∑–∞–¥–∞–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞–π–º–µ—Ä—É
from utils.buttons import Timers_keyboard_self_mode

timers_keyboard_self_mode = Timers_keyboard_self_mode()
markup_timers_self_mode = timers_keyboard_self_mode.keyboard

from utils.buttons import Timers_keyboard_team_mode

timers_keyboard_team_mode = Timers_keyboard_team_mode()
markup_timers_team_mode = timers_keyboard_team_mode.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è markup_after_timers = –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–µ—Å–Ω–∏,
# –ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –∏ "–ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª–µ–µ"
from utils.buttons import After_timers_keyboard_team_mode

after_timers_keyboard_team_mode = After_timers_keyboard_team_mode()
markup_after_timers_team_mode = after_timers_keyboard_team_mode.keyboard

from utils.buttons import Self_mode_after_timers_keyboard

self_mode_after_timers_keyboard = Self_mode_after_timers_keyboard()
markup_self_mode_after_timers = self_mode_after_timers_keyboard.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
from utils.buttons import Break_timer_keyboard_team_mode

breaktimer_keyboard_team_mode = Break_timer_keyboard_team_mode()
markup_breaktimer_team_mode = breaktimer_keyboard_team_mode.keyboard

from utils.buttons import self_mode_break_timer_keyboard

self_mode_breaktimer_keyboard = self_mode_break_timer_keyboard()
markup_self_mode_breaktimer = self_mode_breaktimer_keyboard.keyboard

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
from utils.buttons import Finish_keyboard_modes

finish_keyboard = Finish_keyboard_modes()
markup_finish = finish_keyboard.keyboard


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–æ–≤
def start_timer60(user_id):
    team_mode_user_timers[user_id] = 60  # –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 60 —Å–µ–∫—É–Ω–¥
    msg_id = bot.send_message(user_id, '–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å 60 —Å–µ–∫—É–Ω–¥').message_id
    for t in range(team_mode_user_timers[user_id], -1, -5):
        if team_mode_user_timers[user_id] == 0:
            break
        bot.edit_message_text(chat_id=user_id, message_id=msg_id, text=f'–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∫—É–Ω–¥: {t} ')
        sleep(5)
    bot.edit_message_text(chat_id=user_id, message_id=msg_id, text='–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ö–∞–∫ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏?',
                          reply_markup=markup_after_timers_team_mode)


def self_mode_start_timer60(user_id):
    self_mode_user_timers[user_id] = 60  # –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 60 —Å–µ–∫—É–Ω–¥
    msg_id = bot.send_message(user_id, '–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å 60 —Å–µ–∫—É–Ω–¥').message_id
    for t in range(self_mode_user_timers[user_id], -1, -5):
        if self_mode_user_timers[user_id] == 0:
            break
        bot.edit_message_text(chat_id=user_id, message_id=msg_id, text=f'–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–∫—É–Ω–¥: {t} ')
        sleep(5)
    bot.edit_message_text(chat_id=user_id, message_id=msg_id,
                          text='–í—Ä–µ–º—è –≤—ã—à–ª–æ! –¢–æ—Ç, –∫—Ç–æ –æ—Ç–≥–∞–¥–∞–ª –ø–µ—Å–Ω—é –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å üëá',
                          reply_markup=markup_self_mode_after_timers)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users_info
    cursor2 = conn.execute('SELECT user_id FROM users_info WHERE user_id = ?', (user_id,))
    row = cursor2.fetchone()
    if row is not None:
        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_sname = message.from_user.last_name
        username = message.from_user.username
        query = 'UPDATE users_info SET user_name = ?, user_surname = ?, username = ? WHERE user_id = ?'
        values = (us_name, us_sname, username, us_id)
        cursor.execute(query, values)
        conn.commit()
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏!"
                                                    " \n–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /go —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É".format(
            message.from_user))
    else:
        bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏!"
                                                    " \n–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /go —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É".format(
            message.from_user))
        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_sname = message.from_user.last_name
        username = message.from_user.username
        user_info.add_user(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã go (–ù–∞—á–∞—Ç—å –∏–≥—Ä—É, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É)
@bot.message_handler(commands=['go'])
def go(message):
    bot.send_message(message.chat.id, text="–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤. "
                                           "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö üòÄ ".format(message.from_user),
                     reply_markup=markup_choose_mode)
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ chats_info
    chat_id = message.chat.id
    cht = message.chat.title
    cursor3 = conn.execute('SELECT chat_id FROM chats_info WHERE chat_id = ?', (chat_id,))
    row2 = cursor3.fetchone()
    if row2 is None:
        # –µ—Å–ª–∏ —á–∞—Ç–∞ –µ—â–µ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        user_info.add_chat(chat_id=chat_id, chat_title=cht)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Rules (–ø—Ä–∞–≤–∏–ª–∞)
@bot.message_handler(commands=['rules'])
def rules(message):
    bot.send_message(message.chat.id, '''
<b>–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã:</b>
- –°–æ–±–µ—Ä–∏—Ç–µ –≤–µ—Å—ë–ª—É—é –∫–æ–º–ø–∞–Ω–∏—é (–æ—Ç 3 —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ "–∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è", –æ—Ç 4 –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ);
- –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –¥–æ–±–∞–≤–∏–≤ —Ç—É–¥–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏-–±–æ—Ç–∞
- –ù–µ –±—É–¥—É—Ç –ª–∏—à–Ω–∏–º–∏ –±—É–º–∞–≥–∞ –∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ - –≤ –æ–¥–Ω–æ–º –∏–∑ –∑–∞–¥–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å, –Ω–æ —ç—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å
- –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è:
- –ù–∞–∂–∞—Ç—å @Musactivity_bot 
- –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è —á–∞—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç
–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –ø–æ–º–µ–Ω—è–ª–∏ –∏–º—è (—Ñ–∞–º–∏–ª–∏—é, –Ω–∏–∫–Ω–µ–π–º) –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏ —Ö–æ—Ç–∏—Ç–µ, 
—á—Ç–æ–±—ã –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—Å –ø–æ –Ω–æ–≤–æ–π.

<b>–°—É—Ç—å –∏–≥—Ä—ã:</b>
- –í —ç—Ç–æ–º —á–∞—Ç–µ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, 
–ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. 
- –ó–∞–¥–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ - –æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –∂–µ—Å—Ç–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–µ–≤–∞–Ω–∏—è –º–æ—Ç–∏–≤–∞ 
–¥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∞–Ω—Ç–æ–Ω–∏–º–æ–≤ –∏–ª–∏ —Ä–∏—Å—É–Ω–∫–æ–≤.

<b>–†–µ–∂–∏–º "–ö–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è":</b>
- –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–µ—Å–Ω—é –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º - –±–∞–ª–ª –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –æ—Ç–≥–∞–¥–∞–ª, –∫–∞–∫–∞—è –ø–µ—Å–Ω—è –±—ã–ª–∞ –∑–∞–≥–∞–¥–∞–Ω–∞. 
–≠—Ç–æ—Ç –∂–µ –∏–≥—Ä–æ–∫ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–µ—Å–Ω—é —Å–ª–µ–¥—É—é—â–∏–º.
–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –ø–µ—Å–Ω—é –Ω–∞–¥–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –∑–∞ 1 –º–∏–Ω—É—Ç—É (–∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è) –∏–ª–∏ –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.
–ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–æ –∏—Ç–æ–≥–∞–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—á–∫–æ–≤. 

<b>–ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º:</b>
- –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –æ–±—ä—è—Å–Ω—è—Ç—å –ø–µ—Å–Ω–∏ —Å–≤–æ–∏–º —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–∞–º
- –ü–æ–ª—É—á–∏–≤ –ø–µ—Å–Ω—é, –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ - –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ —É –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Å–≤–æ—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
- –¢–∞–∫–∂–µ, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Å–Ω–∏
- –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏, –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–ª –ø–µ—Å–Ω—é –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è)
- –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
- –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–∞ –∫–æ–º–∞–Ω–¥–∞, —á—å–∏ –∏–≥—Ä–æ–∫–∏ –≤ —Å—É–º–º–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—á–∫–æ–≤. 

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
<u>–í —Ä–µ–∂–∏–º–µ "–∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è"</u>: –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–≥—Ä–∞—Ç—å —Å–æ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞—Ä–∞–Ω–µ–µ —á–∞—Ç–æ–º —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏-–±–æ—Ç–æ–º
<u>–í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ </u>: –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–∞–∫ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–≥–∞–¥—ã–≤–∞—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∏ —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω—ã –∫–æ–º–∞–Ω–¥
- –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /finish –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏–≥—Ä–∞–ª–∏. –¢–æ–≥–¥–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è —Å –Ω—É–ª—è.
- –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.

<b>–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞</b> —è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏:
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–µ–∂–∏–º—ã, —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–µ—Å–µ–Ω.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–≥—Ä—ã –≤—Å–µ–≥–æ –æ–¥–Ω–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–∞ –≤—Å—é –∫–æ–º–ø–∞–Ω–∏—é - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –ø–æ–¥—Å—á—ë—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –∑–∞–¥–∞–Ω–∏–π, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (@Musactivity) –∏ –º—ã –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏–º  –∏—Ö –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
 ''', parse_mode='html', reply_markup=markup_rules)

@bot.message_handler(commands=['tasks'])
def tasks_explanation(message):
    bot.send_message(message.chat.id, '''
–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∑–¥–µ—Å—å:    
https://telegra.ph/Igrovye-zadaniya-Muzaktiviti-06-10
 ''', parse_mode='html', reply_markup=markup_rules)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Stat (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
@bot.message_handler(commands=['stat'])
def stats_command(message):
    bot.send_message(message.chat.id, text=f'''–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å üëá
    ''', parse_mode='html', reply_markup=markup_stat_modes)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã Finish (–∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É)
@bot.message_handler(commands=['finish'])
def finish_commands(message):
    bot.send_message(message.chat.id, text=f'''–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!
–ö–∞–∫–æ–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å? üëá
    ''', parse_mode='html', reply_markup=markup_finish)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda callback: callback.data in ['self_mode', 'team_mode'])
def handle_modes(callback):
    if callback.data == 'self_mode':
        bot.send_message(callback.message.chat.id,
                         '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Å–Ω—é —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä '
                         '–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (1990-–µ, 2000-–µ  –∏ —Ç.–¥.) ',
                         reply_markup=markup_get_song_self_mode)
    elif callback.data == 'team_mode':
        bot.send_message(callback.message.chat.id,
                         '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Å–Ω—é —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä '
                         '–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (1990-–µ, 2000-–µ  –∏ —Ç.–¥.)',
                         reply_markup=markup_get_song_team_mode)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ "–∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è"
@bot.callback_query_handler(func=lambda callback: callback.data in ['self_mode_random_song',
                                                                    'self_mode_genre', 'self_mode_period'])
def handle_menu_self_mode(callback):
    if callback.data == 'self_mode_random_song':
        bot.answer_callback_query(callback.id)
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞—è –¥–æ —ç—Ç–æ–≥–æ –∫–Ω–æ–ø–∫—É start,
        # –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–∏–º –µ—â–µ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –µ–≥–æ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ users_info
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        cursor2 = conn.execute('SELECT user_id FROM users_info WHERE user_id = ?', (us_id,))
        row = cursor2.fetchone()
        if row is not None:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''', parse_mode='html',
                             reply_markup=markup_chosen_song_self_mode)
        else:
            us_id = callback.from_user.id
            us_name = callback.from_user.first_name
            us_sname = callback.from_user.last_name
            username = callback.from_user.username
            user_info.add_user(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)
            bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                             parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é
        song_id, formatted_song = random_song.get_random_song()  # —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞
        #  –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_tasks
        query = "INSERT INTO user_songs (chat_id, user_id, start_session, song_id, is_skip) VALUES (?, ?, ?, ?, ?)"
        values = (ch, us_id, timeconv(datetime), song_id, 0)
        cursor.execute(query, values)
        conn.commit()
        bot.send_message(callback.from_user.id, f'{formatted_song}', parse_mode='html')
    elif callback.data == 'self_mode_genre':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä, –ø–µ—Å–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å',
                         reply_markup=markup_genres_self)
    elif callback.data == 'self_mode_period':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥, –ø–µ—Å–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å',
                         reply_markup=markup_times_self)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ "–∫–æ–º–∞–Ω–¥–Ω—ã–π"
@bot.callback_query_handler(
    func=lambda callback: callback.data in ['team_mode_random_song', 'team_mode_genre', 'team_mode_period'])
def handle_menu_team_mode(callback):
    if callback.data == 'team_mode_random_song':
        bot.answer_callback_query(callback.id)
        # –¢–∞ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏ –≤ —Ä–µ–∂–∏–º–µ "—Å–∞–º –∑–∞ —Å–µ–±—è"
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        cursor2 = conn.execute('SELECT user_id FROM users_info WHERE user_id = ?', (us_id,))
        row = cursor2.fetchone()
        if row is not None:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                             parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        else:
            us_id = callback.from_user.id
            us_name = callback.from_user.first_name
            us_sname = callback.from_user.last_name
            username = callback.from_user.username
            user_info.add_user(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)
            bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                             parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é
        song_id, formatted_song = random_song.get_random_song()  # —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞
        #  –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_tasks
        query = "INSERT INTO user_songs (chat_id, user_id, start_session, song_id, is_skip) VALUES (?, ?, ?, ?, ?)"
        values = (ch, us_id, timeconv(datetime), song_id, 0)
        cursor.execute(query, values)
        conn.commit()
        bot.send_message(callback.from_user.id, f'{formatted_song}', parse_mode='html')
    elif callback.data == 'team_mode_genre':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä, –ø–µ—Å–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å',
                         reply_markup=markup_genres_team)
    elif callback.data == 'team_mode_period':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥, –ø–µ—Å–Ω—é –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å',
                         reply_markup=markup_times_team)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–Ω—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ "–∫–æ–º–∞–Ω–¥–Ω—ã–π"
@bot.callback_query_handler(func=lambda callback: callback.data in ['rock_song_team', 'pop_song_team', 'bard_song_team',
                                                                    'rap_song_team', 'movies_song_team'])
def handle_genres_team_mode(callback):
    if callback.data == 'rock_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        # –î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–¥–µ—Å—å –∏ –¥–∞–ª–µ–µ –º—ã –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—ã genres –∏ times –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º,
        # –∫–∞–∫–∏–µ –∂–∞–Ω—Ä—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        genre = '–†–æ–∫'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_rock(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'pop_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–ü–æ–ø'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_pop(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'bard_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–ë–∞—Ä–¥—ã, —ç—Å—Ç—Ä–∞–¥–∞'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_bards(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'rap_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–•–∏–ø-—Ö–æ–ø, Rnb, –†—ç–ø'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_hip(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'movies_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–ò–∑ —Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_movies(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–Ω—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ "–∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è"
@bot.callback_query_handler(func=lambda callback: callback.data in ['rock_song_self', 'pop_song_self', 'bard_song_self',
                                                                    'rap_song_self', 'movies_song_self'])
def handle_genres_self_mode(callback):
    if callback.data == 'rock_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–†–æ–∫'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_rock(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'pop_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–ü–æ–ø'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_pop(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'bard_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–ë–∞—Ä–¥—ã, —ç—Å—Ç—Ä–∞–¥–∞'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_bards(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'rap_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–•–∏–ø-—Ö–æ–ø, Rnb, –†—ç–ø'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_hip(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'movies_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        genre = '–ò–∑ —Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤'
        random_song.insert_genre_to_db(ch, us_id, timeconv(datetime), genre)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_movies(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ "–∫–æ–º–∞–Ω–¥–Ω—ã–π"
@bot.callback_query_handler(
    func=lambda callback: callback.data in ['2020_song_team', '2010_song_team', '2000_song_team',
                                            '1990_song_team', 'ussr_song_team'])
def handle_times_team_mode(callback):
    if callback.data == '2020_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '2020-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_20(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == '2010_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '2010-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_10(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == '2000_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '2000-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_00(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == '1990_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '1990-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_90(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'ussr_song_team':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '–°–æ–≤–µ—Ç—Å–∫–∏–π –°–æ—é–∑'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_team_mode)
        rsong = random_song.get_song_ussr(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ "–∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è"
@bot.callback_query_handler(
    func=lambda callback: callback.data in ['2020_song_self', '2010_song_self', '2000_song_self',
                                            '1990_song_self', 'ussr_song_self'])
def handle_times_self_mode(callback):
    if callback.data == '2020_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '2020-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_20(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == '2010_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '2010-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_10(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == '2000_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '2000-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_00(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == '1990_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '1990-–µ'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_90(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')
    elif callback.data == 'ussr_song_self':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        times = '–°–æ–≤–µ—Ç—Å–∫–∏–π –°–æ—é–∑'
        random_song.insert_times_to_db(ch, us_id, timeconv(datetime), times)
        bot.send_message(callback.message.chat.id, f'''
–¢–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –±–æ—Ç–æ–º.
–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—åüòâ
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é –∂–º–∏—Ç–µ –∑–¥–µ—Å—å üëá''',
                         parse_mode='html', reply_markup=markup_chosen_song_self_mode)
        rsong = random_song.get_song_ussr(chat_id=ch, user_id=us_id, start_session=timeconv(datetime))
        bot.send_message(callback.from_user.id,
                         f'{rsong}',
                         parse_mode='html')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ "–∫–æ–º–∞–Ω–¥–Ω—ã–π"
@bot.callback_query_handler(func=lambda callback: callback.data in ['right_answer_2', 'right_answer_15',
                                                                    'right_answer_1', 'wrong_answer'])
def inline_points_team_mode(callback):
    # –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π
    points_dict = {
        'right_answer_2': 2,
        'right_answer_15': 1.5,
        'right_answer_1': 1,
        'wrong_answer': 0
    }
    if callback.data in points_dict:
        bot.answer_callback_query(callback.id)
        us_id = callback.from_user.id
        ch = callback.message.chat.id
        datetime = callback.message.date
        points = points_dict.get(callback.data, 0)
        user = callback.from_user.first_name
        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É —Å –æ—á–∫–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ - –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–µ
        team_mode_user_pointsChat.add_points_chat(user_id=us_id, chat_id=ch, points=points, attempts=1,
                                                  right_answers=int(points > 0), false_answers=int(points == 0),
                                                  start_date=timeconv(datetime), game_status=1)
        if points > 1:
            bot.send_message(callback.message.chat.id,
                             f'–°—É–ø–µ—Ä! {user}, –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {points} –±–∞–ª–ª–∞! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ üëá',
                             reply_markup=markup_get_song_team_mode)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_songs
            query = 'UPDATE user_songs SET points = ? WHERE chat_id = ? AND is_skip = ? ' \
                    'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ?)'
            values = (points, ch, 0, ch)
            cursor.execute(query, values)
            conn.commit()
        elif points == 1:
            bot.send_message(callback.message.chat.id,
                             f'–°—É–ø–µ—Ä! {user}, –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç {points} –±–∞–ª–ª! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ üëá',
                             reply_markup=markup_get_song_team_mode)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_songs
            query = 'UPDATE user_songs SET points = ? WHERE chat_id = ? AND is_skip = ? ' \
                    'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ?)'
            values = (points, ch, 0, ch)
            cursor.execute(query, values)
            conn.commit()
        else:
            bot.send_message(callback.message.chat.id,
                             f'{user}, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –≠—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ üëá',
                             reply_markup=markup_get_song_team_mode)
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_songs
            query = 'UPDATE user_songs SET points = ? WHERE chat_id = ? AND is_skip = ? ' \
                    'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ?)'
            values = (points, ch, 0, ch)
            cursor.execute(query, values)
            conn.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
@bot.callback_query_handler(func=lambda callback: callback.data.startswith('task:'))
def handle_task(callback):
    task_key = callback.data.split(':', 1)[1]
    task_text = team_mode_tasks.get(task_key)
    task_score = tasks_scores.get(task_text)
    if task_text and task_score == 1:
        response_text = f'<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ</b>: {task_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        bot.send_message(callback.message.chat.id, response_text, parse_mode='html',
                         reply_markup=markup_timers_team_mode)
    elif task_text and task_score == 1.5:
        response_text = f'<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ</b>: {task_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        bot.send_message(callback.message.chat.id, response_text, parse_mode='html',
                         reply_markup=markup_timers_team_mode)
    elif task_text and task_score == 2:
        response_text = f'<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ</b>: {task_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
        bot.send_message(callback.message.chat.id, response_text, parse_mode='html',
                         reply_markup=markup_timers_team_mode)
    else:
        bot.answer_callback_query(callback_query_id=callback.id, text='–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–ø—Ä–∞–≤–∏–ª–∞, –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É"
@bot.callback_query_handler(
    func=lambda callback: callback.data in ['rules', 'start_game', 'continue', 'stat', 'finish'])
def inline_buttons(callback):
    if callback.data == 'rules':
        bot.send_message(callback.message.chat.id, '''
        <b>–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã:</b>
- –°–æ–±–µ—Ä–∏—Ç–µ –≤–µ—Å—ë–ª—É—é –∫–æ–º–ø–∞–Ω–∏—é (–æ—Ç 3 —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ "–∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è", –æ—Ç 4 –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ);
- –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –¥–æ–±–∞–≤–∏–≤ —Ç—É–¥–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏-–±–æ—Ç–∞
- –ù–µ –±—É–¥—É—Ç –ª–∏—à–Ω–∏–º–∏ –±—É–º–∞–≥–∞ –∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ - –≤ –æ–¥–Ω–æ–º –∏–∑ –∑–∞–¥–∞–Ω–∏–π –Ω—É–∂–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å, –Ω–æ —ç—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å
- –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω. –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è:
- –ù–∞–∂–∞—Ç—å @Musactivity_bot 
- –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è —á–∞—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç
–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –ø–æ–º–µ–Ω—è–ª–∏ –∏–º—è (—Ñ–∞–º–∏–ª–∏—é, –Ω–∏–∫–Ω–µ–π–º) –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏ —Ö–æ—Ç–∏—Ç–µ, 
—á—Ç–æ–±—ã –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏ –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—Å –ø–æ –Ω–æ–≤–æ–π.

<b>–°—É—Ç—å –∏–≥—Ä—ã:</b>
- –í —ç—Ç–æ–º —á–∞—Ç–µ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–º –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, 
–ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. 
- –ó–∞–¥–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ - –æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –∂–µ—Å—Ç–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–µ–≤–∞–Ω–∏—è –º–æ—Ç–∏–≤–∞ 
–¥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∞–Ω—Ç–æ–Ω–∏–º–æ–≤ –∏–ª–∏ —Ä–∏—Å—É–Ω–∫–æ–≤.


<b>–†–µ–∂–∏–º "–ö–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è":</b>
- –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–µ—Å–Ω—é –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º - –±–∞–ª–ª –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –æ—Ç–≥–∞–¥–∞–ª, –∫–∞–∫–∞—è –ø–µ—Å–Ω—è –±—ã–ª–∞ –∑–∞–≥–∞–¥–∞–Ω–∞. 
–≠—Ç–æ—Ç –∂–µ –∏–≥—Ä–æ–∫ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–µ—Å–Ω—é —Å–ª–µ–¥—É—é—â–∏–º.
–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –ø–µ—Å–Ω—é –Ω–∞–¥–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –∑–∞ 1 –º–∏–Ω—É—Ç—É (–∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è) –∏–ª–∏ –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.
–ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–æ –∏—Ç–æ–≥–∞–º –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—á–∫–æ–≤. 

<b>–ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º:</b>
- –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –æ–±—ä—è—Å–Ω—è—Ç—å –ø–µ—Å–Ω–∏ —Å–≤–æ–∏–º —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–∞–º
- –ü–æ–ª—É—á–∏–≤ –ø–µ—Å–Ω—é, –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ - –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ —É –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –µ—Å—Ç—å —Å–≤–æ—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
- –¢–∞–∫–∂–µ, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–µ—Å–Ω–∏
- –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏, –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–ª –ø–µ—Å–Ω—é –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è)
- –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ
- –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–∞ –∫–æ–º–∞–Ω–¥–∞, —á—å–∏ –∏–≥—Ä–æ–∫–∏ –≤ —Å—É–º–º–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—á–∫–æ–≤. 

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
<u>–í —Ä–µ–∂–∏–º–µ "–∫–∞–∂–¥—ã–π —Å–∞–º –∑–∞ —Å–µ–±—è"</u>: –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–≥—Ä–∞—Ç—å —Å–æ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞—Ä–∞–Ω–µ–µ —á–∞—Ç–æ–º —Å –ú—É–∑–ê–∫—Ç–∏–≤–∏—Ç–∏-–±–æ—Ç–æ–º
<u>–í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ </u>: –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–∞–∫ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–≥–∞–¥—ã–≤–∞—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∏ —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω—ã –∫–æ–º–∞–Ω–¥
- –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /finish –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏–≥—Ä–∞–ª–∏. –¢–æ–≥–¥–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è —Å –Ω—É–ª—è.
- –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.

<b>–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞</b> —è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏:
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–µ–∂–∏–º—ã, —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–µ—Å–µ–Ω.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–≥—Ä—ã –≤—Å–µ–≥–æ –æ–¥–Ω–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–∞ –≤—Å—é –∫–æ–º–ø–∞–Ω–∏—é - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –ø–æ–¥—Å—á—ë—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –∑–∞–¥–∞–Ω–∏–π, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (@Musactivity) –∏ –º—ã –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏–º  –∏—Ö –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ ''',
                         parse_mode='html', reply_markup=markup_rules)
    elif callback.data == 'start_game' and lock:
        bot.send_message(callback.message.chat.id,
                         '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö üòÄ',
                         reply_markup=markup_choose_mode)
    elif callback.data == 'continue' and lock:
        bot.send_message(callback.message.chat.id,
                         '–ù–∞–ø–æ–º–Ω–∏—Ç–µ, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –∏–≥—Ä–∞–µ–º?',
                         reply_markup=markup_choose_mode)
    elif callback.data == 'stat' and lock:
        bot.send_message(callback.message.chat.id, text=f'''–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å üëá
   
        ''', parse_mode='html', reply_markup=markup_stat_modes)
    elif callback.data == 'finish' and lock:
        bot.send_message(callback.message.chat.id, text=f'''–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!
–ö–∞–∫–æ–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å? üëá
        ''', parse_mode='html', reply_markup=markup_finish)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.callback_query_handler(func=lambda callback: callback.data in ['stat_self_mode', 'stat_team_mode'])
def inline_stat_modes(callback):
    if callback.data == 'stat_self_mode' and lock:
        ch = callback.message.chat.id
        bot.send_message(callback.message.chat.id, text=f'''<u>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</u>
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω:</b> {self_mode_user_pointsChat.self_mode_get_points_chat(chat_id=ch)}

<u>–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:</u>
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω:</b> {self_mode_user_pointsChat.self_mode_get_current_points_chat(chat_id=ch)}''',
                         parse_mode='html', reply_markup=markup_after_stat_modes)
    elif callback.data == 'stat_team_mode' and lock:
        ch = callback.message.chat.id
        bot.send_message(callback.message.chat.id, text=f'''<u>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:</u>
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {team_mode_user_pointsChat.get_attempts_chat(chat_id=ch)}  
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {team_mode_user_pointsChat.get_right_answers_chat(chat_id=ch)}  
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:</b> {team_mode_user_pointsChat.get_points_chat(chat_id=ch)}

<u>–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:</u>
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {team_mode_user_pointsChat.get_current_attempts_chat(chat_id=ch)}  
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {team_mode_user_pointsChat.get_current_right_answers_chat(chat_id=ch)}  
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:</b> {team_mode_user_pointsChat.get_current_points_chat(chat_id=ch)}
        ''', parse_mode='html', reply_markup=markup_after_stat_modes)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda callback: callback.data in ['team_mode_task', 'self_mode_task'])
def handle_task_modes(callback):
    if callback.data == 'team_mode_task':
        bot.answer_callback_query(callback.id)
        task_key = random.choice(list(team_mode_tasks.keys()))
        task_text = team_mode_tasks[task_key]
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        mode = '–ö–æ–º–∞–Ω–¥–Ω—ã–π'
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        task_button = types.InlineKeyboardButton(text=task_text, callback_data=f'task:{task_key}')
        change_button = types.InlineKeyboardButton(text='üé≤ –ü–æ–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='team_mode_change_task')
        keyboard_team_mode = types.InlineKeyboardMarkup(row_width=1)
        keyboard_team_mode.add(task_button, change_button)
        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_tasks
        query = "INSERT INTO user_tasks (chat_id, user_id, start_session, mode, task_text, is_skip) VALUES (?, ?, ?, ?, ?, ?)"
        values = (ch, us_id, timeconv(datetime), mode, task_text, 0)
        cursor.execute(query, values)
        conn.commit()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É user_songs
        query2 = 'UPDATE user_songs SET task_text = ? WHERE chat_id = ? AND user_id = ? AND is_skip = ? ' \
                 'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ? AND user_id = ?)'
        values2 = (task_text, ch, us_id, 0, ch, us_id)
        cursor.execute(query2, values2)
        conn.commit()
        bot.send_message(callback.message.chat.id, f'<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>', parse_mode='html',
                         reply_markup=keyboard_team_mode)
    elif callback.data == 'self_mode_task':
        bot.answer_callback_query(callback.id)
        task_key = random.choice(list(self_mode_tasks.keys()))
        task_text = self_mode_tasks[task_key]
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        mode = '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        task_button = types.InlineKeyboardButton(text=task_text, callback_data='self_mode_go_timer')
        change_button = types.InlineKeyboardButton(text='üé≤ –ü–æ–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='self_mode_change_task')
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(task_button, change_button)
        # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_tasks
        query = "INSERT INTO user_tasks (chat_id, user_id, start_session, mode, task_text, is_skip) VALUES (?, ?, ?, ?, ?, ?)"
        values = (ch, us_id, timeconv(datetime), mode, task_text, 0)
        cursor.execute(query, values)
        conn.commit()
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É user_songs
        query2 = 'UPDATE user_songs SET task_text = ? WHERE chat_id = ? AND user_id = ? AND is_skip = ? ' \
                 'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ? AND user_id = ?)'
        values2 = (task_text, ch, us_id, 0, ch, us_id)
        cursor.execute(query2, values2)
        conn.commit()
        bot.send_message(callback.message.chat.id, f'<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>', parse_mode='html', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ø–æ–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
@bot.callback_query_handler(func=lambda callback: callback.data in ['team_mode_change_task', 'self_mode_change_task'])
def handle_change_task_modes(callback):
    if callback.data == 'self_mode_change_task' and lock:
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        mode = '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–ø–æ–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", —Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ user_tasks –º—ã –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å is_skip –Ω–∞ 1
        update_tasks_and_songs.update_task_status(ch, us_id)
        task_key = random.choice(list(self_mode_tasks.keys()))
        task_text = self_mode_tasks[task_key]
        task_button = types.InlineKeyboardButton(text=task_text, callback_data='self_mode_go_timer')
        change_button = types.InlineKeyboardButton(text='üé≤ –ü–æ–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='self_mode_change_task')
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(task_button, change_button)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ user_tasks
        update_tasks_and_songs.insert_user_task(ch, us_id, timeconv(datetime), mode, task_text)
        # –ú–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_songs
        query2 = 'UPDATE user_songs SET task_text = ? WHERE chat_id = ? AND user_id = ? AND is_skip = ? ' \
                 'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ? AND user_id = ?)'
        values2 = (task_text, ch, us_id, 0, ch, us_id)
        cursor.execute(query2, values2)
        conn.commit()
        bot.send_message(callback.message.chat.id, f'<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>', parse_mode='html', reply_markup=keyboard)
    elif callback.data == 'team_mode_change_task':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        us_id = callback.from_user.id
        datetime = callback.message.date
        mode = '–ö–æ–º–∞–Ω–¥–Ω—ã–π'
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–µ–Ω—è–ª–∏
        update_tasks_and_songs.update_task_status(ch, us_id)
        task_key = random.choice(list(team_mode_tasks.keys()))
        task_text = team_mode_tasks[task_key]
        task_button = types.InlineKeyboardButton(text=task_text, callback_data=f'task:{task_key}')
        change_button = types.InlineKeyboardButton(text='üé≤ –ü–æ–º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='team_mode_change_task')
        keyboard_team_mode = types.InlineKeyboardMarkup(row_width=1)
        keyboard_team_mode.add(task_button, change_button)
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_tasks
        update_tasks_and_songs.insert_user_task(ch, us_id, timeconv(datetime), mode, task_text)
        # –ú–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_songs
        query2 = 'UPDATE user_songs SET task_text = ? WHERE chat_id = ? AND user_id = ? AND is_skip = ? ' \
                 'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ? AND user_id = ?)'
        values2 = (task_text, ch, us_id, 0, ch, us_id)
        cursor.execute(query2, values2)
        conn.commit()
        bot.send_message(callback.message.chat.id, f'<b>–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:</b>', parse_mode='html',
                         reply_markup=keyboard_team_mode)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ø–æ–º–µ–Ω—è—Ç—å –ø–µ—Å–Ω—é"
@bot.callback_query_handler(func=lambda callback: callback.data in ['team_mode_another_song', 'self_mode_another_song'])
def handle_another_songs(callback):
    if callback.data == 'self_mode_another_song':
        bot.answer_callback_query(callback.id)
        us_id = callback.from_user.id
        ch = callback.message.chat.id
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, –∫–∞–∫—É—é –ø–µ—Å–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å
        cursor2 = conn.execute('SELECT song_id FROM user_songs WHERE chat_id = ? AND user_id = ? AND is_skip = ? '
                               'ORDER BY start_session DESC LIMIT 1',
                               (ch, us_id, 0))
        current_song_id = cursor2.fetchone()[0]
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É user_songs
        update_tasks_and_songs.update_current_song_status(ch, us_id, current_song_id)
        bot.send_message(callback.message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Å–Ω—é —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä '
                         '–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (1990-–µ, 2000-–µ  –∏ —Ç.–¥.)',
                         parse_mode='html', reply_markup=markup_get_song_self_mode)
    if callback.data == 'team_mode_another_song':
        bot.answer_callback_query(callback.id)
        us_id = callback.from_user.id
        ch = callback.message.chat.id
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, –∫–∞–∫—É—é –ø–µ—Å–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å
        cursor2 = conn.execute('SELECT song_id FROM user_songs WHERE chat_id = ? AND user_id = ? AND is_skip = ? '
                               'ORDER BY start_session DESC LIMIT 1',
                               (ch, us_id, 0))
        current_song_id = cursor2.fetchone()[0]
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É user_songs
        update_tasks_and_songs.update_current_song_status(ch, us_id, current_song_id)
        bot.send_message(callback.message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Å–Ω—é —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä '
                         '–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (1990-–µ, 2000-–µ  –∏ —Ç.–¥.)',
                         parse_mode='html', reply_markup=markup_get_song_team_mode)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ
@bot.callback_query_handler(func=lambda callback: callback.data in ['team_mode_timer60',
                                                                    'team_mode_break_timer', 'team_mode_without_timer'])
def handle_timer_team_mode(callback):
    if callback.data == 'team_mode_timer60':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id,
                         '–¢–∞–π–º–µ—Ä –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, '
                         '–Ω–∞–∂–º–∏—Ç–µ üëá', reply_markup=markup_breaktimer_team_mode)
        threading.Thread(target=start_timer60, args=(callback.message.chat.id,)).start()
    elif callback.data == 'team_mode_break_timer':
        team_mode_user_timers[callback.message.chat.id] = 0
    elif callback.data == 'team_mode_without_timer':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, '–ö–∞–∫ –≤–∞—à–∏ —É—Å–ø–µ—Ö–∏?', reply_markup=markup_after_timers_team_mode)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞–π–º–µ—Ä—É –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
@bot.callback_query_handler(func=lambda callback: callback.data in ['self_mode_go_timer'])
def go_timer__self_mode(callback):
    if callback.data == 'self_mode_go_timer':
        bot.answer_callback_query(callback.id)
        us_id = callback.from_user.id
        ch = callback.message.chat.id
        datetime = callback.message.date
        self_mode_user_pointsChat.self_mode_add_points_chat(user_id=us_id, chat_id=ch, points=0,
                                                            right_attempts=1, false_attempts=0,
                                                            start_date=timeconv(datetime), game_status=1)
        bot.send_message(callback.message.chat.id, '–ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ',
                         reply_markup=markup_timers_self_mode)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–µ—Ä–∞ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
@bot.callback_query_handler(func=lambda callback: callback.data in ['self_mode_timer60', 'self_mode_break_timer',
                                                                    'self_mode_without_timer'])
def handle_timer_buttons_self_mode(callback):
    if callback.data == 'self_mode_timer60':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id,
                         '–¢–∞–π–º–µ—Ä –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, '
                         '–Ω–∞–∂–º–∏—Ç–µ üëá', reply_markup=markup_self_mode_breaktimer)
        threading.Thread(target=self_mode_start_timer60, args=(callback.message.chat.id,)).start()
    elif callback.data == 'self_mode_break_timer':
        self_mode_user_timers[callback.message.chat.id] = 0
    elif callback.data == 'self_mode_without_timer':
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, '–¢–æ—Ç, –∫—Ç–æ –æ—Ç–≥–∞–¥–∞–ª –ø–µ—Å–Ω—é –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å üëá',
                         reply_markup=markup_self_mode_after_timers)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
@bot.callback_query_handler(func=lambda callback: callback.data in ['right_answer_self_mode', 'wrong_answer_self_mode'])
def inline_points_self_mode(callback):
    if callback.data == 'right_answer_self_mode':
        bot.answer_callback_query(callback.id)
        us_id = callback.from_user.id
        ch = callback.message.chat.id
        datetime = callback.message.date
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_songs
        query = 'UPDATE user_songs SET points = ? WHERE chat_id = ? AND is_skip = ? ' \
                'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ?)'
        values = (1, ch, 0, ch)
        cursor.execute(query, values)
        conn.commit()
        self_mode_user_pointsChat.self_mode_add_points_chat(user_id=us_id, chat_id=ch, points=1,
                                                            right_attempts=0, false_attempts=0,
                                                            start_date=timeconv(datetime), game_status=1)
        user = callback.from_user.first_name
        bot.send_message(callback.message.chat.id,
                         f'{user}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–∞–ª–ª, —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Å–Ω—é –æ–±—ä—è—Å–Ω—è–µ—Ç–µ –í—ã üëá',
                         reply_markup=markup_get_song_self_mode)
    if callback.data == 'wrong_answer_self_mode':
        bot.answer_callback_query(callback.id)
        us_id = callback.from_user.id
        ch = callback.message.chat.id
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_songs
        query = 'UPDATE user_songs SET points = ? WHERE chat_id = ? AND is_skip = ? ' \
                'AND id = (SELECT MAX(id) FROM user_songs WHERE chat_id = ?)'
        values = (0, ch, 0, ch)
        cursor.execute(query, values)
        conn.commit()
        user = callback.from_user.first_name
        datetime = callback.message.date
        self_mode_user_pointsChat.self_mode_add_points_chat(user_id=us_id, chat_id=ch, points=0, right_attempts=0,
                                                            false_attempts=1,
                                                            start_date=timeconv(datetime), game_status=1)
        bot.send_message(callback.message.chat.id,
                         f'{user}, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –≠—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, '
                         f'–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –ø–µ—Å–Ω—é —Å–ª–µ–¥—É—é—â–∏–º üëá',
                         reply_markup=markup_get_song_self_mode)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å
@bot.callback_query_handler(func=lambda callback: callback.data in ['finish_self_mode', 'finish_team_mode'])
def inline_finish_modes(callback):
    if callback.data == 'finish_self_mode':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        self_mode_chat_points = self_mode_user_pointsChat.self_mode_check_chat(chat_id=ch)
        if self_mode_chat_points is not None:
            bot.send_message(callback.message.chat.id, text=f'''
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! 
–í–∞—à–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é:
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω:</b> {self_mode_user_pointsChat.self_mode_get_current_points_chat(chat_id=ch)}''',
                             parse_mode='html')
        else:
            bot.send_message(callback.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ "–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /go')
        sleep(1)
        self_mode_user_pointsChat.self_mode_finish_game_chat(chat_id=ch)
    if callback.data == 'finish_team_mode':
        bot.answer_callback_query(callback.id)
        ch = callback.message.chat.id
        current_attempts = team_mode_user_pointsChat.get_current_attempts_chat(chat_id=ch)
        if current_attempts != 0:
            bot.send_message(callback.message.chat.id, text=f'''
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –í–∞—à–∞ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é:
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {team_mode_user_pointsChat.get_current_attempts_chat(chat_id=ch)}  
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {team_mode_user_pointsChat.get_current_right_answers_chat(chat_id=ch)}  
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:</b> {team_mode_user_pointsChat.get_current_points_chat(chat_id=ch)}
            ''', parse_mode='html')
        else:
            bot.send_message(callback.message.chat.id, '–ù–∞–∂–º–∏—Ç–µ "–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /go')
        sleep(1)
        team_mode_user_pointsChat.finish_game_chat(chat_id=ch)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(content_types=['text'])
def handle_text(message):
    bot.send_message(message.chat.id, f'''–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é:
/go  –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/stat  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/finish  –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É
/rules  –ü–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞
''')

# –¶–∏–∫–ª, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –±–æ—Ç—É –Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
while True:
    try:
        bot.polling(none_stop=True)
    except:
        print('–û—à–∏–±–∫–∞')
        logging.error('error: {}'.format(sys.exc_info()[0]))
        time.sleep(5)
